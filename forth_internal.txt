


New Plan!

run_word needs to be a bytecode interpreter. Just simple enough to execute calls to function tokens, jumps back and forth, etc.
The plan to put constants into anonymous words is scuttled a bit by the concept of compiling working on the top word in the dictionary, as those anonymous words become the new "top words".
One solution is to have a top_word pointer that refers to the word being compiled. Another is to build in such constant finding into the bytecode.




- fith -

Named dictionaries for namespaces - regular words still work as expected, but words with dots get called like "namespace address wordcall", so a word "dood" gets called in the main dictionary while "peep.dood" gets called under peep
Or maybe "peep. dood", where namespace dot words read ahead to the next method and call it with a different tick
So "peep. dood" would be "address of peep dictionary on stack, call tick, call special execute that pulls token and dictionary token"

Cell typing - cells hold a type and data, for instance "integer 2" or "float 43.1" or "character b". Words can pull the type of the word on the stack and behave accordingly.

Objects - 

definition uses a special colon word, followed by a constructor
when the word is called it reserves a new entry in the dict for it, like other variables, and runs the words provided

:obj car  float fuel  integer passengers  ;obj

methods are added later, allowing modification of the object on the fly. objects get their own namespaces
a method call puts the address of the called object on the context stack, which can be pulled by the word self.
or not? maybe a custom area...

: car.fill 100 self car. fuel




namespace

s" ls -lh" ::System exec

* puts string on stack
* ::System puts the address of the System dictionary on the stack, then runs a tick...
* exec is the function call to make within that dictionary, which is gobbled up by ::System
* ::System runs an NamespaceExecute that gobbles the exe token and the dictionary pointer

object references

->porsche fill 
--or--
porsche ->car fill

either words are typed (python style) or they are not typed (c style)
typed words know their parent object, i.e. they are smarter than a simple datastore
when created they add an additional word, ->name, that acts like a namespace call on that object
otherwise you could do it forth style, where the object just puts its pointer on the stack
then ->name calls would just be like namespace calls, but distinguished for some reason that i'd like to defend stronger than "just because"
might be part of pointer enforcement - ::name calls don't expect anything special on the stack, but ->name calls expect the object reference up top
when its execute call exits, it wants to clean that pointer up, thus it is mandatory to have

actually while that idea is clever and might actually work as a way to implement objects in ansi forth, the former is better:
* objects need to be type-aware anyway to make the cell stack and operator overloading work
* fith is supposed to be better than forth, and avoid these kinds of pains

overloading could happen by using dispatch words, i.e. operators that are type-aware
for instance, plus could check the top of the stack for its type and call a plus function for that object

porsche ferrari +




-~-~-~-~-~-~-~-~-~-

a simple hello world looks like forth

." hello world" <-/ hello world ok

and so does simple math and word definition

: square dup * ; 9 square . <-/ 81 ok

but there's more to it than that 

3.5 9 + . <-/ 12.5 ok
s" hello" 0x20 + s" world" + type <-/ hello world ok

how does one overload operators in forth?
well consider that the dictionary in forth appends words to its end
and is scanned from end to beginning
a word can take advantage of this by using THIS-LAST, which rescans the dictionary and calls the previous iteration of the calling word
so let's say you want to have SQUARE make squares of negative numbers negative
the traditional forth way would be to redefine square wholesale:

: square dup * ; 3 square . <-/ 9 ok
: square dup negative? if dup * -1 * else dup * then ; -3 square . <-/ -9 ok

and for a word as simple as square this would probably be ok
but why rewrite any code? instead let's just call the last definition of square from the new definition

forget square <-/ ok
: square dup negative? if this-last -1 * else this-last then ; -3 square . <-/ -9 ok

this is handy for extending the behavior of words to do new things, like operator overloading 
consider this example that adds floating point support to the integer addition operator

: + dup isfloat? if swap dup isfloat? if float+ else tofloat float+ then else this-last then ; <-/ ok
2 3 + . <-/ 5 ok
2.0 3 + . <-/ 5.0 ok
2.0 3.0 + . <-/ 5.0 ok

actually that has a bug in it but i'm not worried about it, it demonstrates the point
stacks in fifh are made up of cells, which hold a type and a value or a reference to a value 
types are pointers to the type dictionary but don't worry about that now
the point here is that types can be compared and evaluated like one would expect

3 .type-of <-/ integer ok
6.22 .type-of <-/ float ok
1.1 type-of 4 type-of = . <-/ 0 ok

fifh abandons the wordlists and vocabularies of forth in favor of namespaces, which are named dictionaries
namespaces work like they do in c or java, but obviously more betterer

s" uname -r" ->System exec <-/ 20.5.0 ok

this works by defining a ->name word for a namespace that calls the following word in its own dictionary
namespaces can be constructed with the namespace class of words, and new functions can be added with :name

namespace Math <-/ ok
:Math square dup * ; 3 ->Math square . <-/ 9 ok

very similar to the namespace word is the object word, which defines a namespace but also defines construction semantics
this works 
object Car 
